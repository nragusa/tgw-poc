---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  A VPC for the BIDMC PoC
Parameters:
  Project:
    Type: String
    Default: BIDMC TGW PoC
  Environment:
    Type: String
    Default: Dev
    AllowedValues:
    - Dev
    - Test
    - Prod
  TGWStackName:
    Type: String
    Description: The name of the CloudFormation stack that built the Transit Gateway
    Default: bidmc-poc-tgw

  # Subnets
  VPCSubnetCidrBlock:
    Description: CIDR block for the VPC
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock1:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock2:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock3:
    Type: String
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  AttachToTransitGateway:
    Type: String
    Default: false
    AllowedValues:
      - false
      - true
    Description: Select "true" if you'd like to attach this VPC to the Transit Gateway
  ConnectToSpokeVpc:
    Type: String
    Default: false
    AllowedValues:
      - false
      - true
    Description: Select "true" if you want this VPC to connect to spoke VPCs

Mappings: 
  RegionMap: 
    us-east-1: 
      'az1': 'us-east-1b'
      'az2': 'us-east-1c'
      'az3': 'us-east-1d'
      'ssm': 'com.amazonaws.us-east-1.ssm'
      'ssmmanager': 'com.amazonaws.us-east-1.ssmmessages'
      'ami': 'ami-0b69ea66ff7391e80'
    us-east-2: 
      'az1': 'us-east-2a'
      'az2': 'us-east-2b'
      'az3': 'us-east-2c'
      'ssm': 'com.amazonaws.us-east-2.ssm'
      'ssmmanager': 'com.amazonaws.us-east-2.ssmmessages'
      'ami': 'ami-00c03f7f7f2ec15c3'

Conditions:
  ConnectToSpokes: !And
    - !Equals [ !Ref ConnectToSpokeVpc, true ]
    - !Condition AttachToTGW
  AttachToTGW: !Equals [ !Ref AttachToTransitGateway, true ]

Resources:
  # VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCSubnetCidrBlock
      Tags:
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", az1]
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private-az1" ] ]
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", az2]
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private-az2" ] ]
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", az3]
      CidrBlock: !Ref PrivateSubnetCidrBlock3
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private-az3" ] ]
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join [ "", [ !Ref "AWS::StackName", "-private" ] ]
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  # Transit Gateway Resources
  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Condition: AttachToTGW
    Properties: 
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags: 
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
      - Key: Name
        Value: !Ref AWS::StackName
      TransitGatewayId: 
        Fn::ImportValue:
          !Sub ${TGWStackName}-tgw-id
      VpcId: !Ref VPC
  TGWRouteTableAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Condition: AttachToTGW
    Properties: 
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId:
        Fn::ImportValue:
          !Sub ${TGWStackName}-rtb-spokes
  TGWRoute:
    Type: AWS::EC2::Route
    DependsOn:
    - TransitGatewayAttachment
    Condition: AttachToTGW
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId:
        Fn::ImportValue:
          !Sub ${TGWStackName}-tgw-id
  TGWPropogateSpokeRouteInSpokeRtb:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Condition: ConnectToSpokes
    Properties: 
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId: 
        Fn::ImportValue:
          !Sub ${TGWStackName}-rtb-spokes


  # Private Link
  SSMServicePrivateLink:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SSMInterfaceSG
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", ssm]
      SubnetIds: 
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  SSMSesssionManagerPrivateLink:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        - !Ref SSMInterfaceSG
      ServiceName: !FindInMap [RegionMap, !Ref "AWS::Region", ssmmanager]
      SubnetIds: 
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface
      VpcId: !Ref VPC
  SSMInterfaceSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group for SSM interface
      GroupName: ssm-interface-sg
      SecurityGroupIngress: 
        - CidrIp: !Ref VPCSubnetCidrBlock
          Description: Allow HTTPS to interface endpoint
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags: 
      - Key: Name
        Value: ssm-interface-sg
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
      VpcId: !Ref VPC

  # Test EC2 instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", ami]
      InstanceType: t3.micro
      SecurityGroupIds: 
        - !Ref EC2InstanceSG
      SubnetId: !Ref PrivateSubnet1
      Tags: 
      - Key: Name
        Value: !Ref "AWS::StackName"
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
  EC2InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group for testing EC2 instance
      GroupName: ec2-test-sg
      SecurityGroupIngress: 
        - CidrIp: 10.0.0.0/8
          Description: Allow ICMP from 10/8 IP space
          IpProtocol: -1
      Tags: 
      - Key: Name
        Value: ec2-test-sg
      - Key: Project
        Value: !Ref Project
      - Key: Environment
        Value: !Ref Environment
      VpcId: !Ref VPC
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref EC2InstanceRole
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      Description: Instance role for test EC2 instance in BIDMC PoC
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label:
          default: Ownership
        Parameters: 
          - Project
          - Environment
      - 
        Label:
          default: VPC
        Parameters:
          - VPCSubnetCidrBlock
          - PrivateSubnetCidrBlock1
          - PrivateSubnetCidrBlock2
          - PrivateSubnetCidrBlock3

    ParameterLabels:
      VPCSubnetCidrBlock:
        default: VPC CIDR Block
      PrivateSubnetCidrBlock1:
        default: Private1 CIDR Block
      PrivateSubnetCidrBlock2:
        default: Private2 CIDR Block
      PrivateSubnetCidrBlock3:
        default: Private3 CIDR Block

Outputs:
  Project:
    Description: The project name
    Value: !Ref Project
  Environment:
    Description: The environment of this VPC
    Value: !Ref Environment
    Export:
      Name: !Sub ${AWS::StackName}-Environment
  VPC:
    Description: Created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID
  VPCCIDR:
    Description: VPC Subnet CIDR Block
    Value: !Ref VPCSubnetCidrBlock
    Export:
      Name: !Sub ${AWS::StackName}-VPCCIDR
  PrivateRouteTable:
    Description: Private Route Table Created for VPC
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-RouteTable
  PrivateSubnet1:
    Description: Private Subnet 1 Created for VPC
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
  PrivateSubnet2:
    Description: Private Subnet 2 Created for VPC
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
  PrivateSubnet3:
    Description: Private Subnet 3 Created for VPC
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3 
  AvailabilityZone1:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PrivateSubnet1.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZ1
  AvailabilityZone2:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PrivateSubnet2.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZ2
  AvailabilityZone3:
    Description: Private Subnet IDs Created for VPC
    Value: !GetAtt PrivateSubnet3.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-AZ3
  PrivateSubnetCidr1:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock1
  PrivateSubnetCidr2:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock2
  PrivateSubnetCidr3:
    Description: Private Subnet IDs Created for VPC
    Value: !Ref PrivateSubnetCidrBlock3
  EC2InstanceIP:
    Description: Private IP address of the instance
    Value: !GetAtt EC2Instance.PrivateIp